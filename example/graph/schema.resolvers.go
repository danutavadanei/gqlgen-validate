package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.81

import (
	"context"
	"errors"
	"strconv"

	"github.com/danutavadanei/gqlgen-validate/example/graph/generated"
	"github.com/danutavadanei/gqlgen-validate/example/graph/model"
)

// RegisterUser is the resolver for the registerUser field.
func (r *mutationResolver) RegisterUser(ctx context.Context, input model.RegisterUserInput) (*model.User, error) {
	r.mu.Lock()
	defer r.mu.Unlock()

	for _, existing := range r.users {
		if existing.Email == input.Email {
			return nil, errors.New("user with that email already exists")
		}
	}

	r.nextID++
	questionnaireAnswers := make([]*model.QuestionnaireAnswer, 0, len(input.QuestionnaireAnswers))
	for _, qa := range input.QuestionnaireAnswers {
		mqa := &model.QuestionnaireAnswer{QuestionID: qa.QuestionID}
		if qa.AnswerID != nil {
			mqa.AnswerID = qa.AnswerID
		}
		if qa.AnswerText != nil {
			mqa.AnswerText = qa.AnswerText
		}
		questionnaireAnswers = append(questionnaireAnswers, mqa)
	}

	user := &model.User{
		ID:                   strconv.Itoa(r.nextID),
		Email:                input.Email,
		Age:                  input.Age,
		Password:             input.Password,
		TermsAndConditions:   append([]string(nil), input.TermsAndConditions...),
		QuestionnaireAnswers: questionnaireAnswers,
	}

	r.users = append(r.users, user)
	return user, nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	r.mu.Lock()
	defer r.mu.Unlock()

	out := make([]*model.User, len(r.users))
	copy(out, r.users)
	return out, nil
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
